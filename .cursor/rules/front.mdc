---
description: "Estándares y convenciones para desarrollo frontend con Angular y Tailwind CSS"
globs: ["**/*.ts", "**/*.html", "**/*.css", "**/package.json", "**/tsconfig.json"]
alwaysApply: true
---

# Reglas de Frontend - CampusBookings

Estándares y mejores prácticas para el desarrollo del frontend en Angular con Tailwind CSS.

## Alias de Rutas (Path Aliases)
- Siempre usa alias de rutas en lugar de imports relativos cuando sea posible
- Configura alias en `tsconfig.json` para mejor mantenibilidad
- Usa el prefijo `@/` para imports del directorio src
- Usa `@components/`, `@services/`, `@models/`, etc. para directorios específicos
- Ejemplo: `import { UserService } from '@/services/user.service'` en lugar de `import { UserService } from '../../../services/user.service'`

## Flujo de Control de Angular
- Prefiere la nueva sintaxis de control flow de Angular sobre directivas estructurales cuando sea posible
- Usa `@if` en lugar de `*ngIf` para renderizado condicional
- Usa `@for` en lugar de `*ngFor` para renderizado de listas
- Usa `@defer` para lazy loading de componentes y mejorar rendimiento
- Usa `@switch` para múltiples escenarios de renderizado condicional
- Siempre proporciona contenido fallback para bloques `@defer`
- Usa `@if` con `@else` para mejor legibilidad

## Tailwind CSS
- Utiliza Tailwind CSS para todos los estilos
- Prefiere clases utilitarias sobre CSS personalizado
- Mantén consistencia con la paleta de colores de USCO
- Usa clases responsivas cuando sea necesario

## Organización por Características (Feature-based)
- Organiza componentes por funcionalidad/característica
- Cada característica debe tener su propio módulo cuando sea necesario
- Mantén servicios específicos cerca de los componentes que los usan

### Ejemplos de Control Flow:
```typescript
// Correcto - Usando @if
@if (user) {
  <div>{{ user.name }}</div>
} @else {
  <div>Cargando...</div>
}

// Correcto - Usando @for
@for (item of items; track item.id) {
  <div>{{ item.name }}</div>
}

// Correcto - Usando @defer
@defer (on viewport) {
  <heavy-component />
} @placeholder {
  <div>Cargando...</div>
}

// Correcto - Usando @switch
@switch (status) {
  @case ('active') {
    <div class="text-green-600">Activo</div>
  }
  @case ('inactive') {
    <div class="text-red-600">Inactivo</div>
  }
  @default {
    <div class="text-gray-600">Desconocido</div>
  }
}
```

### Estructura de Componentes:
```typescript
// Estructura recomendada para componentes
import { Component, Input, Output, EventEmitter } from '@angular/core';

// Interfaces en la parte superior
interface UserProps {
  id: number;
  name: string;
  email: string;
}

@Component({
  selector: 'app-user-card',
  template: `
    <div class="bg-white rounded-lg shadow-md p-4">
      @if (user) {
        <h3 class="text-lg font-semibold">{{ user.name }}</h3>
        <p class="text-gray-600">{{ user.email }}</p>
      }
    </div>
  `,
  styles: [`
    /* Estilos específicos del componente si es absolutamente necesario */
  `]
})
export class UserCardComponent {
  @Input() user: UserProps | null = null;
  @Output() userSelected = new EventEmitter<UserProps>();
  
  // Métodos del componente
}
```
